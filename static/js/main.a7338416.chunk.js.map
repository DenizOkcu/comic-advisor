{"version":3,"sources":["components/Header.js","components/RedButton.js","components/ComicDetailsCreators.js","components/ComicDetailsCharacters.js","components/ComicsDetails.js","components/ComicsListItem.js","components/ComicsList.js","utils/ComicsSerializer.js","config/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","RedButton","link","text","classes","clickFunction","blank","href","target","rel","className","onClick","ComicDetailsCreators","creatorItems","creators","map","creator","name","role","id","ComicDetailsCharacters","characterItems","characters","character","ComicsDetails","comic","detailsHiddenOnMobile","clickToCloseDetails","title","src","coverPath","alt","length","date","purchaseLink","ComicsListItem","active","selectComic","writer","price","ComicsList","comics","selectedComic","fetchComics","listItems","e","preventDefault","ComicsSerializer","formatPrice","priceString","formatDate","dateString","Date","parse","toDateString","serialize","response","data","results","item","thumbnail","path","extension","replace","items","index","find","pageCount","prices","type","description","urls","url","dates","console","log","filter","App","state","selectedComicId","error","offset","Math","ceil","random","config","setState","axios","get","then","res","catch","this","connectionMessage","contentSuccess","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7338416.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Header.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>What should I read today?</h1>\n      <h5>Your humble Comic Advisor</h5>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst RedButton = ({ link, text, classes, clickFunction, blank = false }) => {\n  return (\n    <a\n      href={link}\n      target={blank ? \"_blank\" : \"\"}\n      rel=\"noopener noreferrer\"\n      className={classes}\n      onClick={clickFunction}\n    >\n      {text}\n    </a>\n  );\n};\n\nexport default RedButton;\n","import React from \"react\";\n\nconst ComicDetailsCreators = ({ creators }) => {\n  const creatorItems = creators.map(creator => (\n    <li key={creator.id}>{`${creator.name} (${creator.role})`}</li>\n  ));\n\n  return (\n    <section>\n      <b>Created by:</b>\n      <ul>{creatorItems}</ul>\n    </section>\n  );\n};\n\nexport default ComicDetailsCreators;\n","import React from \"react\";\n\nconst ComicDetailsCharacters = ({ characters }) => {\n  const characterItems = characters.map(character => (\n    <li key={character.id}>{`${character.name}`}</li>\n  ));\n\n  return (\n    <section>\n      <b>Characters in this issue:</b>\n      <ul>{characterItems}</ul>\n    </section>\n  );\n};\n\nexport default ComicDetailsCharacters;\n","import React from \"react\";\n\nimport RedButton from \"./RedButton\";\nimport ComicDetailsCreators from \"./ComicDetailsCreators\";\nimport ComicDetailsCharacters from \"./ComicDetailsCharacters\";\n\nimport \"./ComicsDetails.css\";\n\n// renders the detail view\n// it is a hidden modal in mobile portait mode\n// which can be shown by selecting a comic from the list view\n// it consists of the cover image and information about\n// creators and characters\n// a button leads to the external comic book shop\nconst ComicsDetails = ({\n  comic,\n  detailsHiddenOnMobile,\n  clickToCloseDetails\n}) => {\n  const comicDetail = comic && (\n    <article\n      className={\n        \"details\" +\n        (detailsHiddenOnMobile ? \" hidden-on-mobile\" : \" visible-on-mobile\")\n      }\n    >\n      {/* a close button for the mobile modal view */}\n      <div\n        onClick={clickToCloseDetails}\n        className=\"close-details hidden-on-gt-mobile\"\n      >\n        close\n      </div>\n\n      <p className=\"detail-title\">{comic.title}</p>\n\n      <div className=\"detail-cover-text-container\">\n        <div className=\"detail-cover\">\n          <img src={comic.coverPath} className=\"\" alt={comic.title} />\n        </div>\n\n        <div className=\"detail-text\">\n          {comic.characters && comic.characters.length > 0 && (\n            <ComicDetailsCharacters characters={comic.characters} />\n          )}\n          {comic.creators && comic.creators.length > 0 && (\n            <ComicDetailsCreators creators={comic.creators} />\n          )}\n          <b>Release:</b> {comic.date}\n        </div>\n      </div>\n\n      <RedButton\n        link={comic.purchaseLink}\n        text={\"Learn more\"}\n        classes={[\"primary-button\"]}\n        blank={true}\n      />\n    </article>\n  );\n\n  return comicDetail || null;\n};\n\nexport default ComicsDetails;\n","import React from \"react\";\n\nimport \"./ComicsListItem.css\";\n\nconst ComicsListItem = ({ comic, active, selectComic }) => {\n  const clickToSelectComic = () => {\n    selectComic(comic.id);\n  };\n\n  // renders a list item that can select a comic\n  // and that can have an active state while being selected\n  return (\n    <section\n      className={\"list-item\" + (active ? \" active\" : \"\")}\n      onClick={clickToSelectComic}\n    >\n      <div className=\"list-item-cover\">\n        <img src={comic.coverPath} alt={comic.title} />\n      </div>\n\n      <div className=\"list-item-description\">\n        <div>\n          <b>{comic.title}</b>\n        </div>\n        {/* the writer can be empty due to different possible roles */}\n        {comic.writer ? <div className=\"\">by {comic.writer.name}</div> : \"\"}\n        <div>Price: {comic.price}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default ComicsListItem;\n","import React from \"react\";\n\nimport RedButton from \"./RedButton\";\nimport ComicsListItem from \"./ComicsListItem\";\n\nimport \"./ComicsList.css\";\n\nconst ComicsList = ({ comics, selectedComic, selectComic, fetchComics }) => {\n  const clickToFetchComics = e => {\n    fetchComics();\n    e.preventDefault();\n  };\n\n  // assemble the list items\n  // only if at least one comic has been loaded\n  const listItems =\n    comics &&\n    comics.length > 0 &&\n    comics.map(comic => (\n      <ComicsListItem\n        key={comic.id}\n        comic={comic}\n        selectComic={selectComic}\n        active={selectedComic && selectedComic.id === comic.id}\n      />\n    ));\n\n  return (\n    <aside className=\"comics-list\">\n      {listItems}\n      <RedButton\n        text={\"Load more\"}\n        classes={[\"random-button\"]}\n        clickFunction={clickToFetchComics}\n      />\n    </aside>\n  );\n};\n\nexport default ComicsList;\n","// add prop types\n\nclass ComicsSerializer {\n  formatPrice = priceString => priceString && `$${priceString}`;\n\n  formatDate = dateString => {\n    let date = new Date(Date.parse(dateString)).toDateString();\n\n    return date !== \"Invalid Date\" ? date : \"No Date available\";\n  };\n\n  serialize = response => {\n    return response.data.results\n      .map(item => {\n        let comic = {};\n\n        try {\n          comic.coverPath = `${item.thumbnail.path}.${item.thumbnail.extension}`.replace(\n            \"http:\",\n            \"https:\"\n          );\n          comic.creators = item.creators.items.map((creator, index) => {\n            creator.id = index;\n            return creator;\n          });\n          comic.writer = comic.creators.find(\n            creator =>\n              creator.role === \"writer\" ||\n              creator.role === \"inker\" ||\n              creator.role === \"editor\"\n          );\n          comic.characters = item.characters.items.map((character, index) => {\n            character.id = index;\n            return character;\n          });\n          comic.id = item.id;\n          comic.pageCount = item.pageCount || \"-\";\n          comic.price = this.formatPrice(\n            item.prices.find(price => price.type === \"printPrice\").price || \"-\"\n          );\n          comic.title = item.title || \"No Title\";\n          comic.description = item.description;\n          comic.purchaseLink = item.urls.find(\n            url => url.type === \"purchase\" || url.type === \"detail\"\n          ).url;\n          comic.date = this.formatDate(\n            item.dates.find(\n              date => date.type === \"focDate\" || date.type === \"onsaleDate\"\n            ).date\n          );\n        } catch (e) {\n          console.log(e);\n        }\n\n        return comic;\n      })\n      .filter(\n        item => item.id && item.title && item.purchaseLink && item.coverPath\n      );\n  };\n}\n\nexport default ComicsSerializer;\n","export default {\n  publicApiKey: \"e4d9813c604e68af2b80750496961901\",\n  apiUrl: \"https://gateway.marvel.com/v1/public/comics\"\n};\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Header from \"./components/Header\";\nimport ComicsDetails from \"./components/ComicsDetails\";\nimport ComicsList from \"./components/ComicsList\";\nimport ComicsSerializer from \"./utils/ComicsSerializer\";\nimport config from \"./config\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  // the state will hold\n  // - the comics\n  // - the id of the selected comic for the detail view\n  // - information if the detail modal in mobile portrait mode is hidden\n  state = {\n    comics: null,\n    selectedComicId: null,\n    detailsHiddenOnMobile: true,\n    error: null\n  };\n\n  fetchComics = () => {\n    const limit = 6;\n    const offset = Math.ceil(Math.random() * 10000);\n    const url = `${config.apiUrl}?limit=${limit}&offset=${offset}&apikey=${config.publicApiKey}`;\n\n    // resets the comics, shows the spinner\n    this.setState({ comics: null });\n    this.setState({ selectedComicId: null });\n\n    axios\n      .get(url)\n      .then(res => {\n        // validate and cleanup the comic data\n        // fill missing attributes with defaults\n        const comicsSerializer = new ComicsSerializer();\n        const comics = comicsSerializer.serialize(res.data);\n\n        // add comics to the state\n        this.setState({ comics });\n        this.setState({ selectedComicId: comics[0] && comics[0].id });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n  };\n\n  // function to select a comic from the list\n  selectComic = id => {\n    this.setState({ selectedComicId: id });\n    this.setState({ detailsHiddenOnMobile: false });\n  };\n\n  // function to let the user close the mobile detail modal\n  clickToCloseDetails = () => {\n    this.setState({ detailsHiddenOnMobile: true });\n  };\n\n  componentDidMount() {\n    this.fetchComics();\n  }\n\n  render() {\n    // get the comics and find the selected comic object\n    let comics = this.state.comics;\n    let selectedComic =\n      comics && comics.find(comic => comic.id === this.state.selectedComicId);\n\n    // check for errors, a pending request or...\n    let connectionMessage = this.state.error ? (\n      <main className=\"loading-wrapper\">\n        <div className=\"loading-title\">\n          An error occurred. Please come back later.\n        </div>\n      </main>\n    ) : (\n      <main className=\"loading-wrapper\">\n        <div className=\"loading-title\">Your comics are loading</div>\n        <div className=\"loading-ripple\">\n          <div></div>\n          <div></div>\n        </div>\n      </main>\n    );\n    // ...a successfully loaded response\n    let contentSuccess = (\n      <main>\n        <ComicsList\n          comics={comics}\n          selectedComic={selectedComic}\n          selectComic={this.selectComic}\n          fetchComics={this.fetchComics}\n        />\n        <ComicsDetails\n          comic={selectedComic}\n          detailsHiddenOnMobile={this.state.detailsHiddenOnMobile}\n          clickToCloseDetails={this.clickToCloseDetails}\n        />\n      </main>\n    );\n\n    return (\n      <div className=\"container\">\n        <Header />\n        {comics ? contentSuccess : connectionMessage}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}